{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _excluded = [\"navigation\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { getHeaderTitle, Header, SafeAreaProviderCompat, Screen } from '@react-navigation/elements';\nimport { DrawerActions, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as Reanimated from 'react-native-reanimated';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\nimport DrawerPositionContext from \"../utils/DrawerPositionContext\";\nimport DrawerStatusContext from \"../utils/DrawerStatusContext\";\nimport getDrawerStatusFromState from \"../utils/getDrawerStatusFromState\";\nimport DrawerContent from \"./DrawerContent\";\nimport DrawerToggleButton from \"./DrawerToggleButton\";\nimport { GestureHandlerRootView } from \"./GestureHandler\";\nimport { MaybeScreen, MaybeScreenContainer } from \"./ScreenFallback\";\nvar getDefaultDrawerWidth = function getDefaultDrawerWidth(_ref) {\n  var height = _ref.height,\n    width = _ref.width;\n  var smallerAxisSize = Math.min(height, width);\n  var isLandscape = width > height;\n  var isTablet = smallerAxisSize >= 600;\n  var appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  var maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\nvar GestureHandlerWrapper = GestureHandlerRootView != null ? GestureHandlerRootView : View;\nfunction DrawerViewBase(_ref2) {\n  var _Reanimated$isConfigu;\n  var state = _ref2.state,\n    navigation = _ref2.navigation,\n    descriptors = _ref2.descriptors,\n    defaultStatus = _ref2.defaultStatus,\n    _ref2$drawerContent = _ref2.drawerContent,\n    drawerContent = _ref2$drawerContent === void 0 ? function (props) {\n      return React.createElement(DrawerContent, props);\n    } : _ref2$drawerContent,\n    _ref2$detachInactiveS = _ref2.detachInactiveScreens,\n    detachInactiveScreens = _ref2$detachInactiveS === void 0 ? Platform.OS === 'web' || Platform.OS === 'android' || Platform.OS === 'ios' : _ref2$detachInactiveS,\n    _ref2$useLegacyImplem = _ref2.useLegacyImplementation,\n    useLegacyImplementation = _ref2$useLegacyImplem === void 0 ? !((_Reanimated$isConfigu = Reanimated.isConfigured) !== null && _Reanimated$isConfigu !== void 0 && _Reanimated$isConfigu.call(Reanimated)) : _ref2$useLegacyImplem;\n  var legacyImplemenationNotAvailable = require('react-native-reanimated').abs === undefined;\n  if (useLegacyImplementation && legacyImplemenationNotAvailable) {\n    throw new Error('The `useLegacyImplementation` prop is not available with Reanimated 3 as it no longer includes support for Reanimated 1 legacy API. Remove the `useLegacyImplementation` prop from `Drawer.Navigator` to be able to use it.');\n  }\n  var Drawer = useLegacyImplementation ? require(\"./legacy/Drawer\").default : require(\"./modern/Drawer\").default;\n  var focusedRouteKey = state.routes[state.index].key;\n  var _descriptors$focusedR = descriptors[focusedRouteKey].options,\n    _descriptors$focusedR2 = _descriptors$focusedR.drawerHideStatusBarOnOpen,\n    drawerHideStatusBarOnOpen = _descriptors$focusedR2 === void 0 ? false : _descriptors$focusedR2,\n    _descriptors$focusedR3 = _descriptors$focusedR.drawerPosition,\n    drawerPosition = _descriptors$focusedR3 === void 0 ? I18nManager.getConstants().isRTL ? 'right' : 'left' : _descriptors$focusedR3,\n    _descriptors$focusedR4 = _descriptors$focusedR.drawerStatusBarAnimation,\n    drawerStatusBarAnimation = _descriptors$focusedR4 === void 0 ? 'slide' : _descriptors$focusedR4,\n    drawerStyle = _descriptors$focusedR.drawerStyle,\n    _descriptors$focusedR5 = _descriptors$focusedR.drawerType,\n    drawerType = _descriptors$focusedR5 === void 0 ? Platform.select({\n      ios: 'slide',\n      default: 'front'\n    }) : _descriptors$focusedR5,\n    gestureHandlerProps = _descriptors$focusedR.gestureHandlerProps,\n    _descriptors$focusedR6 = _descriptors$focusedR.keyboardDismissMode,\n    keyboardDismissMode = _descriptors$focusedR6 === void 0 ? 'on-drag' : _descriptors$focusedR6,\n    _descriptors$focusedR7 = _descriptors$focusedR.overlayColor,\n    overlayColor = _descriptors$focusedR7 === void 0 ? 'rgba(0, 0, 0, 0.5)' : _descriptors$focusedR7,\n    _descriptors$focusedR8 = _descriptors$focusedR.swipeEdgeWidth,\n    swipeEdgeWidth = _descriptors$focusedR8 === void 0 ? 32 : _descriptors$focusedR8,\n    _descriptors$focusedR9 = _descriptors$focusedR.swipeEnabled,\n    swipeEnabled = _descriptors$focusedR9 === void 0 ? Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos' : _descriptors$focusedR9,\n    _descriptors$focusedR10 = _descriptors$focusedR.swipeMinDistance,\n    swipeMinDistance = _descriptors$focusedR10 === void 0 ? 60 : _descriptors$focusedR10;\n  var _React$useState = React.useState([focusedRouteKey]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    loaded = _React$useState2[0],\n    setLoaded = _React$useState2[1];\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([].concat(_toConsumableArray(loaded), [focusedRouteKey]));\n  }\n  var dimensions = useSafeAreaFrame();\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors;\n  var drawerStatus = getDrawerStatusFromState(state);\n  var handleDrawerOpen = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.openDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  var handleDrawerClose = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.closeDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  React.useEffect(function () {\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\n      return;\n    }\n    var handleHardwareBack = function handleHardwareBack() {\n      if (!navigation.isFocused()) {\n        return false;\n      }\n      if (defaultStatus === 'open') {\n        handleDrawerOpen();\n      } else {\n        handleDrawerClose();\n      }\n      return true;\n    };\n    var handleEscape = function handleEscape(e) {\n      if (e.key === 'Escape') {\n        handleHardwareBack();\n      }\n    };\n\n    var subscription = BackHandler.addEventListener('hardwareBackPress', handleHardwareBack);\n    if (Platform.OS === 'web') {\n      var _document, _document$body, _document$body$addEve;\n      (_document = document) === null || _document === void 0 ? void 0 : (_document$body = _document.body) === null || _document$body === void 0 ? void 0 : (_document$body$addEve = _document$body.addEventListener) === null || _document$body$addEve === void 0 ? void 0 : _document$body$addEve.call(_document$body, 'keyup', handleEscape);\n    }\n    return function () {\n      subscription.remove();\n      if (Platform.OS === 'web') {\n        var _document2, _document2$body, _document2$body$remov;\n        (_document2 = document) === null || _document2 === void 0 ? void 0 : (_document2$body = _document2.body) === null || _document2$body === void 0 ? void 0 : (_document2$body$remov = _document2$body.removeEventListener) === null || _document2$body$remov === void 0 ? void 0 : _document2$body$remov.call(_document2$body, 'keyup', handleEscape);\n      }\n    };\n  }, [defaultStatus, drawerStatus, drawerType, handleDrawerClose, handleDrawerOpen, navigation]);\n  var renderDrawerContent = function renderDrawerContent() {\n    return React.createElement(DrawerPositionContext.Provider, {\n      value: drawerPosition\n    }, drawerContent({\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    }));\n  };\n  var renderSceneContent = function renderSceneContent() {\n    return React.createElement(MaybeScreenContainer, {\n      enabled: detachInactiveScreens,\n      hasTwoStates: true,\n      style: styles.content\n    }, state.routes.map(function (route, index) {\n      var descriptor = descriptors[route.key];\n      var _descriptor$options = descriptor.options,\n        _descriptor$options$l = _descriptor$options.lazy,\n        lazy = _descriptor$options$l === void 0 ? true : _descriptor$options$l,\n        unmountOnBlur = _descriptor$options.unmountOnBlur;\n      var isFocused = state.index === index;\n      if (unmountOnBlur && !isFocused) {\n        return null;\n      }\n      if (lazy && !loaded.includes(route.key) && !isFocused) {\n        return null;\n      }\n      var _descriptor$options2 = descriptor.options,\n        freezeOnBlur = _descriptor$options2.freezeOnBlur,\n        _descriptor$options2$ = _descriptor$options2.header,\n        header = _descriptor$options2$ === void 0 ? function (_ref3) {\n          var _options$headerLeft;\n          var layout = _ref3.layout,\n            options = _ref3.options;\n          return React.createElement(Header, _extends({}, options, {\n            layout: layout,\n            title: getHeaderTitle(options, route.name),\n            headerLeft: (_options$headerLeft = options.headerLeft) != null ? _options$headerLeft : function (props) {\n              return React.createElement(DrawerToggleButton, props);\n            }\n          }));\n        } : _descriptor$options2$,\n        headerShown = _descriptor$options2.headerShown,\n        headerStatusBarHeight = _descriptor$options2.headerStatusBarHeight,\n        headerTransparent = _descriptor$options2.headerTransparent,\n        sceneContainerStyle = _descriptor$options2.sceneContainerStyle;\n      return React.createElement(MaybeScreen, {\n        key: route.key,\n        style: [StyleSheet.absoluteFill, {\n          zIndex: isFocused ? 0 : -1\n        }],\n        visible: isFocused,\n        enabled: detachInactiveScreens,\n        freezeOnBlur: freezeOnBlur\n      }, React.createElement(Screen, {\n        focused: isFocused,\n        route: descriptor.route,\n        navigation: descriptor.navigation,\n        headerShown: headerShown,\n        headerStatusBarHeight: headerStatusBarHeight,\n        headerTransparent: headerTransparent,\n        header: header({\n          layout: dimensions,\n          route: descriptor.route,\n          navigation: descriptor.navigation,\n          options: descriptor.options\n        }),\n        style: sceneContainerStyle\n      }, descriptor.render()));\n    }));\n  };\n  return React.createElement(DrawerStatusContext.Provider, {\n    value: drawerStatus\n  }, React.createElement(Drawer, {\n    open: drawerStatus !== 'closed',\n    onOpen: handleDrawerOpen,\n    onClose: handleDrawerClose,\n    gestureHandlerProps: gestureHandlerProps,\n    swipeEnabled: swipeEnabled,\n    swipeEdgeWidth: swipeEdgeWidth,\n    swipeVelocityThreshold: 500,\n    swipeDistanceThreshold: swipeMinDistance,\n    hideStatusBarOnOpen: drawerHideStatusBarOnOpen,\n    statusBarAnimation: drawerStatusBarAnimation,\n    keyboardDismissMode: keyboardDismissMode,\n    drawerType: drawerType,\n    drawerPosition: drawerPosition,\n    drawerStyle: [{\n      width: getDefaultDrawerWidth(dimensions),\n      backgroundColor: colors.card\n    }, drawerType === 'permanent' && (drawerPosition === 'left' ? {\n      borderRightColor: colors.border,\n      borderRightWidth: StyleSheet.hairlineWidth\n    } : {\n      borderLeftColor: colors.border,\n      borderLeftWidth: StyleSheet.hairlineWidth\n    }), drawerStyle],\n    overlayStyle: {\n      backgroundColor: overlayColor\n    },\n    renderDrawerContent: renderDrawerContent,\n    renderSceneContent: renderSceneContent,\n    dimensions: dimensions\n  }));\n}\nexport default function DrawerView(_ref4) {\n  var navigation = _ref4.navigation,\n    rest = _objectWithoutProperties(_ref4, _excluded);\n  return React.createElement(SafeAreaProviderCompat, null, React.createElement(GestureHandlerWrapper, {\n    style: styles.content\n  }, React.createElement(DrawerViewBase, _extends({\n    navigation: navigation\n  }, rest))));\n}\nvar styles = StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["DrawerView.tsx"],"names":["getHeaderTitle","Header","SafeAreaProviderCompat","Screen","DrawerActions","useTheme","React","Reanimated","useSafeAreaFrame","DrawerPositionContext","DrawerStatusContext","getDrawerStatusFromState","DrawerContent","DrawerToggleButton","GestureHandlerRootView","MaybeScreen","MaybeScreenContainer","getDefaultDrawerWidth","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","Platform","OS","maxWidth","GestureHandlerWrapper","View","DrawerViewBase","state","navigation","descriptors","defaultStatus","drawerContent","props","detachInactiveScreens","useLegacyImplementation","isConfigured","legacyImplemenationNotAvailable","require","abs","undefined","Error","Drawer","default","focusedRouteKey","routes","index","key","drawerHideStatusBarOnOpen","drawerPosition","I18nManager","getConstants","isRTL","drawerStatusBarAnimation","drawerStyle","drawerType","select","ios","gestureHandlerProps","keyboardDismissMode","overlayColor","swipeEdgeWidth","swipeEnabled","swipeMinDistance","options","loaded","setLoaded","useState","includes","dimensions","colors","drawerStatus","handleDrawerOpen","useCallback","dispatch","openDrawer","target","handleDrawerClose","closeDrawer","useEffect","handleHardwareBack","isFocused","handleEscape","e","subscription","BackHandler","addEventListener","body","remove","removeEventListener","renderDrawerContent","renderSceneContent","styles","content","map","route","descriptor","lazy","unmountOnBlur","freezeOnBlur","header","layout","name","headerLeft","headerShown","headerStatusBarHeight","headerTransparent","sceneContainerStyle","StyleSheet","absoluteFill","zIndex","render","backgroundColor","card","borderRightColor","border","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","DrawerView","rest","create","flex"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nimport { getHeaderTitle, Header, SafeAreaProviderCompat, Screen } from '@react-navigation/elements';\nimport { DrawerActions, useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { BackHandler, I18nManager, Platform, StyleSheet, View } from 'react-native';\nimport * as Reanimated from 'react-native-reanimated';\nimport { useSafeAreaFrame } from 'react-native-safe-area-context';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport DrawerStatusContext from '../utils/DrawerStatusContext';\nimport getDrawerStatusFromState from '../utils/getDrawerStatusFromState';\nimport DrawerContent from './DrawerContent';\nimport DrawerToggleButton from './DrawerToggleButton';\nimport { GestureHandlerRootView } from './GestureHandler';\nimport { MaybeScreen, MaybeScreenContainer } from './ScreenFallback';\nconst getDefaultDrawerWidth = _ref => {\n  let {\n    height,\n    width\n  } = _ref;\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/components/navigation-drawer\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  const maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\nfunction DrawerViewBase(_ref2) {\n  var _Reanimated$isConfigu;\n  let {\n    state,\n    navigation,\n    descriptors,\n    defaultStatus,\n    drawerContent = props => /*#__PURE__*/React.createElement(DrawerContent, props),\n    detachInactiveScreens = Platform.OS === 'web' || Platform.OS === 'android' || Platform.OS === 'ios',\n    // Reanimated 2 is not configured\n    // @ts-expect-error: the type definitions are incomplete\n    useLegacyImplementation = !((_Reanimated$isConfigu = Reanimated.isConfigured) !== null && _Reanimated$isConfigu !== void 0 && _Reanimated$isConfigu.call(Reanimated))\n  } = _ref2;\n  // Reanimated v3 dropped legacy v1 syntax\n  const legacyImplemenationNotAvailable = require('react-native-reanimated').abs === undefined;\n  if (useLegacyImplementation && legacyImplemenationNotAvailable) {\n    throw new Error('The `useLegacyImplementation` prop is not available with Reanimated 3 as it no longer includes support for Reanimated 1 legacy API. Remove the `useLegacyImplementation` prop from `Drawer.Navigator` to be able to use it.');\n  }\n  const Drawer = useLegacyImplementation ? require('./legacy/Drawer').default : require('./modern/Drawer').default;\n  const focusedRouteKey = state.routes[state.index].key;\n  const {\n    drawerHideStatusBarOnOpen = false,\n    drawerPosition = I18nManager.getConstants().isRTL ? 'right' : 'left',\n    drawerStatusBarAnimation = 'slide',\n    drawerStyle,\n    drawerType = Platform.select({\n      ios: 'slide',\n      default: 'front'\n    }),\n    gestureHandlerProps,\n    keyboardDismissMode = 'on-drag',\n    overlayColor = 'rgba(0, 0, 0, 0.5)',\n    swipeEdgeWidth = 32,\n    swipeEnabled = Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos',\n    swipeMinDistance = 60\n  } = descriptors[focusedRouteKey].options;\n  const [loaded, setLoaded] = React.useState([focusedRouteKey]);\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n  const dimensions = useSafeAreaFrame();\n  const {\n    colors\n  } = useTheme();\n  const drawerStatus = getDrawerStatusFromState(state);\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key\n    });\n  }, [navigation, state.key]);\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key\n    });\n  }, [navigation, state.key]);\n  React.useEffect(() => {\n    if (drawerStatus === defaultStatus || drawerType === 'permanent') {\n      return;\n    }\n    const handleHardwareBack = () => {\n      // We shouldn't handle the back button if the parent screen isn't focused\n      // This will avoid the drawer overriding event listeners from a focused screen\n      if (!navigation.isFocused()) {\n        return false;\n      }\n      if (defaultStatus === 'open') {\n        handleDrawerOpen();\n      } else {\n        handleDrawerClose();\n      }\n      return true;\n    };\n    const handleEscape = e => {\n      if (e.key === 'Escape') {\n        handleHardwareBack();\n      }\n    };\n\n    // We only add the listeners when drawer opens\n    // This way we can make sure that the listener is added as late as possible\n    // This will make sure that our handler will run first when back button is pressed\n    const subscription = BackHandler.addEventListener('hardwareBackPress', handleHardwareBack);\n    if (Platform.OS === 'web') {\n      var _document, _document$body, _document$body$addEve;\n      (_document = document) === null || _document === void 0 ? void 0 : (_document$body = _document.body) === null || _document$body === void 0 ? void 0 : (_document$body$addEve = _document$body.addEventListener) === null || _document$body$addEve === void 0 ? void 0 : _document$body$addEve.call(_document$body, 'keyup', handleEscape);\n    }\n    return () => {\n      subscription.remove();\n      if (Platform.OS === 'web') {\n        var _document2, _document2$body, _document2$body$remov;\n        (_document2 = document) === null || _document2 === void 0 ? void 0 : (_document2$body = _document2.body) === null || _document2$body === void 0 ? void 0 : (_document2$body$remov = _document2$body.removeEventListener) === null || _document2$body$remov === void 0 ? void 0 : _document2$body$remov.call(_document2$body, 'keyup', handleEscape);\n      }\n    };\n  }, [defaultStatus, drawerStatus, drawerType, handleDrawerClose, handleDrawerOpen, navigation]);\n  const renderDrawerContent = () => {\n    return /*#__PURE__*/React.createElement(DrawerPositionContext.Provider, {\n      value: drawerPosition\n    }, drawerContent({\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    }));\n  };\n  const renderSceneContent = () => {\n    return /*#__PURE__*/React.createElement(MaybeScreenContainer, {\n      enabled: detachInactiveScreens,\n      hasTwoStates: true,\n      style: styles.content\n    }, state.routes.map((route, index) => {\n      const descriptor = descriptors[route.key];\n      const {\n        lazy = true,\n        unmountOnBlur\n      } = descriptor.options;\n      const isFocused = state.index === index;\n      if (unmountOnBlur && !isFocused) {\n        return null;\n      }\n      if (lazy && !loaded.includes(route.key) && !isFocused) {\n        // Don't render a lazy screen if we've never navigated to it\n        return null;\n      }\n      const {\n        freezeOnBlur,\n        header = _ref3 => {\n          let {\n            layout,\n            options\n          } = _ref3;\n          return /*#__PURE__*/React.createElement(Header, _extends({}, options, {\n            layout: layout,\n            title: getHeaderTitle(options, route.name),\n            headerLeft: options.headerLeft ?? (props => /*#__PURE__*/React.createElement(DrawerToggleButton, props))\n          }));\n        },\n        headerShown,\n        headerStatusBarHeight,\n        headerTransparent,\n        sceneContainerStyle\n      } = descriptor.options;\n      return /*#__PURE__*/React.createElement(MaybeScreen, {\n        key: route.key,\n        style: [StyleSheet.absoluteFill, {\n          zIndex: isFocused ? 0 : -1\n        }],\n        visible: isFocused,\n        enabled: detachInactiveScreens,\n        freezeOnBlur: freezeOnBlur\n      }, /*#__PURE__*/React.createElement(Screen, {\n        focused: isFocused,\n        route: descriptor.route,\n        navigation: descriptor.navigation,\n        headerShown: headerShown,\n        headerStatusBarHeight: headerStatusBarHeight,\n        headerTransparent: headerTransparent,\n        header: header({\n          layout: dimensions,\n          route: descriptor.route,\n          navigation: descriptor.navigation,\n          options: descriptor.options\n        }),\n        style: sceneContainerStyle\n      }, descriptor.render()));\n    }));\n  };\n  return /*#__PURE__*/React.createElement(DrawerStatusContext.Provider, {\n    value: drawerStatus\n  }, /*#__PURE__*/React.createElement(Drawer, {\n    open: drawerStatus !== 'closed',\n    onOpen: handleDrawerOpen,\n    onClose: handleDrawerClose,\n    gestureHandlerProps: gestureHandlerProps,\n    swipeEnabled: swipeEnabled,\n    swipeEdgeWidth: swipeEdgeWidth,\n    swipeVelocityThreshold: 500,\n    swipeDistanceThreshold: swipeMinDistance,\n    hideStatusBarOnOpen: drawerHideStatusBarOnOpen,\n    statusBarAnimation: drawerStatusBarAnimation,\n    keyboardDismissMode: keyboardDismissMode,\n    drawerType: drawerType,\n    drawerPosition: drawerPosition,\n    drawerStyle: [{\n      width: getDefaultDrawerWidth(dimensions),\n      backgroundColor: colors.card\n    }, drawerType === 'permanent' && (drawerPosition === 'left' ? {\n      borderRightColor: colors.border,\n      borderRightWidth: StyleSheet.hairlineWidth\n    } : {\n      borderLeftColor: colors.border,\n      borderLeftWidth: StyleSheet.hairlineWidth\n    }), drawerStyle],\n    overlayStyle: {\n      backgroundColor: overlayColor\n    },\n    renderDrawerContent: renderDrawerContent,\n    renderSceneContent: renderSceneContent,\n    dimensions: dimensions\n  }));\n}\nexport default function DrawerView(_ref4) {\n  let {\n    navigation,\n    ...rest\n  } = _ref4;\n  return /*#__PURE__*/React.createElement(SafeAreaProviderCompat, null, /*#__PURE__*/React.createElement(GestureHandlerWrapper, {\n    style: styles.content\n  }, /*#__PURE__*/React.createElement(DrawerViewBase, _extends({\n    navigation: navigation\n  }, rest))));\n}\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});\n//# sourceMappingURL=DrawerView.js.map"]},"metadata":{},"sourceType":"module"}