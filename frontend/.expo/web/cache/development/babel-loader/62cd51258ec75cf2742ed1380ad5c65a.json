{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport * as React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from 'react-native-reanimated';\nimport DrawerProgressContext from \"../../utils/DrawerProgressContext\";\nimport { GestureState, PanGestureHandler } from \"../GestureHandler\";\nimport Overlay from \"./Overlay\";\nvar Clock = Animated.Clock,\n  Value = Animated.Value,\n  onChange = Animated.onChange,\n  clockRunning = Animated.clockRunning,\n  startClock = Animated.startClock,\n  stopClock = Animated.stopClock,\n  spring = Animated.spring,\n  abs = Animated.abs,\n  add = Animated.add,\n  and = Animated.and,\n  block = Animated.block,\n  call = Animated.call,\n  cond = Animated.cond,\n  divide = Animated.divide,\n  eq = Animated.eq,\n  event = Animated.event,\n  greaterThan = Animated.greaterThan,\n  lessThan = Animated.lessThan,\n  max = Animated.max,\n  min = Animated.min,\n  multiply = Animated.multiply,\n  neq = Animated.neq,\n  or = Animated.or,\n  set = Animated.set,\n  sub = Animated.sub;\nvar TRUE = 1;\nvar FALSE = 0;\nvar NOOP = 0;\nvar UNSET = -1;\nvar DIRECTION_LEFT = 1;\nvar DIRECTION_RIGHT = -1;\nvar SWIPE_DISTANCE_MINIMUM = 5;\nvar DEFAULT_DRAWER_WIDTH = '80%';\nvar SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01\n};\nvar ANIMATED_ZERO = new Animated.Value(0);\nvar ANIMATED_ONE = new Animated.Value(1);\nvar DrawerView = function (_React$Component) {\n  _inherits(DrawerView, _React$Component);\n  var _super = _createSuper(DrawerView);\n  function DrawerView() {\n    var _this;\n    _classCallCheck(this, DrawerView);\n    _this = _super.apply(this, arguments);\n    _defineProperty(_assertThisInitialized(_this), \"handleEndInteraction\", function () {\n      if (_this.interactionHandle !== undefined) {\n        InteractionManager.clearInteractionHandle(_this.interactionHandle);\n        _this.interactionHandle = undefined;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleStartInteraction\", function () {\n      if (_this.interactionHandle === undefined) {\n        _this.interactionHandle = InteractionManager.createInteractionHandle();\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getDrawerWidth\", function () {\n      var _this$props = _this.props,\n        drawerStyle = _this$props.drawerStyle,\n        dimensions = _this$props.dimensions;\n      var _ref4 = StyleSheet.flatten(drawerStyle) || {},\n        _ref4$width = _ref4.width,\n        width = _ref4$width === void 0 ? DEFAULT_DRAWER_WIDTH : _ref4$width;\n      if (typeof width === 'string' && width.endsWith('%')) {\n        var percentage = Number(width.replace(/%$/, ''));\n        if (Number.isFinite(percentage)) {\n          return dimensions.width * (percentage / 100);\n        }\n      }\n      return typeof width === 'number' ? width : 0;\n    });\n    _defineProperty(_assertThisInitialized(_this), \"clock\", new Clock());\n    _defineProperty(_assertThisInitialized(_this), \"interactionHandle\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"isDrawerTypeFront\", new Value(_this.props.drawerType === 'front' ? TRUE : FALSE));\n    _defineProperty(_assertThisInitialized(_this), \"isOpen\", new Value(_this.props.open ? TRUE : FALSE));\n    _defineProperty(_assertThisInitialized(_this), \"nextIsOpen\", new Value(UNSET));\n    _defineProperty(_assertThisInitialized(_this), \"isSwiping\", new Value(FALSE));\n    _defineProperty(_assertThisInitialized(_this), \"initialDrawerWidth\", _this.getDrawerWidth());\n    _defineProperty(_assertThisInitialized(_this), \"gestureState\", new Value(GestureState.UNDETERMINED));\n    _defineProperty(_assertThisInitialized(_this), \"touchX\", new Value(0));\n    _defineProperty(_assertThisInitialized(_this), \"velocityX\", new Value(0));\n    _defineProperty(_assertThisInitialized(_this), \"gestureX\", new Value(0));\n    _defineProperty(_assertThisInitialized(_this), \"offsetX\", new Value(0));\n    _defineProperty(_assertThisInitialized(_this), \"position\", new Value(_this.props.open ? _this.initialDrawerWidth * (_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT) : 0));\n    _defineProperty(_assertThisInitialized(_this), \"containerWidth\", new Value(_this.props.dimensions.width));\n    _defineProperty(_assertThisInitialized(_this), \"drawerWidth\", new Value(_this.initialDrawerWidth));\n    _defineProperty(_assertThisInitialized(_this), \"drawerOpacity\", new Value(_this.props.drawerType === 'permanent' ? 1 : 0));\n    _defineProperty(_assertThisInitialized(_this), \"drawerPosition\", new Value(_this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT));\n    _defineProperty(_assertThisInitialized(_this), \"touchDistanceFromDrawer\", cond(_this.isDrawerTypeFront, cond(eq(_this.drawerPosition, DIRECTION_LEFT), max(\n    sub(sub(_this.touchX, _this.gestureX), _this.drawerWidth), 0), min(multiply(\n    sub(sub(_this.containerWidth, _this.drawerWidth), sub(_this.touchX, _this.gestureX)), DIRECTION_RIGHT), 0)), 0));\n    _defineProperty(_assertThisInitialized(_this), \"swipeDistanceThreshold\", new Value(_this.props.swipeDistanceThreshold));\n    _defineProperty(_assertThisInitialized(_this), \"swipeVelocityThreshold\", new Value(_this.props.swipeVelocityThreshold));\n    _defineProperty(_assertThisInitialized(_this), \"currentOpenValue\", _this.props.open);\n    _defineProperty(_assertThisInitialized(_this), \"pendingOpenValue\", void 0);\n    _defineProperty(_assertThisInitialized(_this), \"isStatusBarHidden\", false);\n    _defineProperty(_assertThisInitialized(_this), \"manuallyTriggerSpring\", new Value(FALSE));\n    _defineProperty(_assertThisInitialized(_this), \"transitionTo\", function (isOpen) {\n      var toValue = new Value(0);\n      var frameTime = new Value(0);\n      var state = {\n        position: _this.position,\n        time: new Value(0),\n        finished: new Value(FALSE),\n        velocity: new Value(0)\n      };\n      return block([cond(clockRunning(_this.clock), NOOP, [\n      set(toValue, multiply(isOpen, _this.drawerWidth, _this.drawerPosition)), set(frameTime, 0), set(state.time, 0), set(state.finished, FALSE), set(state.velocity, _this.velocityX), set(_this.isOpen, isOpen), startClock(_this.clock), call([], _this.handleStartInteraction), set(_this.manuallyTriggerSpring, FALSE)]), spring(_this.clock, state, _objectSpread(_objectSpread({}, SPRING_CONFIG), {}, {\n        toValue: toValue\n      })), cond(state.finished, [\n      set(_this.touchX, 0), set(_this.gestureX, 0), set(_this.velocityX, 0), set(_this.offsetX, 0),\n      stopClock(_this.clock), call([_this.isOpen], function (_ref) {\n        var _ref5 = _slicedToArray(_ref, 1),\n          value = _ref5[0];\n        var open = Boolean(value);\n        _this.handleEndInteraction();\n        if (open !== _this.props.open) {\n          _this.toggleDrawer(_this.props.open);\n        }\n      })])]);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"dragX\", block([onChange(_this.isOpen, call([_this.isOpen], function (_ref2) {\n      var _ref6 = _slicedToArray(_ref2, 1),\n        value = _ref6[0];\n      var open = Boolean(value);\n      _this.currentOpenValue = open;\n\n      if (open !== _this.props.open) {\n        if (open) {\n          _this.props.onOpen();\n        } else {\n          _this.props.onClose();\n        }\n        _this.pendingOpenValue = open;\n\n        _this.forceUpdate();\n      }\n    })), onChange(_this.nextIsOpen, cond(neq(_this.nextIsOpen, UNSET), [\n    cond(clockRunning(_this.clock), stopClock(_this.clock)),\n    set(_this.isOpen, _this.nextIsOpen), set(_this.gestureX, 0), set(_this.nextIsOpen, UNSET)])),\n    onChange(_this.isSwiping,\n    call([_this.isSwiping], function (_ref3) {\n      var _ref7 = _slicedToArray(_ref3, 1),\n        value = _ref7[0];\n      var keyboardDismissMode = _this.props.keyboardDismissMode;\n      if (value === TRUE) {\n        if (keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n        _this.toggleStatusBar(true);\n      } else {\n        _this.toggleStatusBar(_this.currentOpenValue);\n      }\n    })), onChange(_this.gestureState, cond(eq(_this.gestureState, GestureState.ACTIVE), call([], _this.handleStartInteraction))), cond(eq(_this.gestureState, GestureState.ACTIVE), [cond(_this.isSwiping, NOOP, [\n    set(_this.isSwiping, TRUE),\n    set(_this.offsetX, _this.position)]),\n    set(_this.position, add(_this.offsetX, _this.gestureX, _this.touchDistanceFromDrawer)),\n    stopClock(_this.clock)], [set(_this.isSwiping, FALSE), set(_this.touchX, 0), _this.transitionTo(cond(_this.manuallyTriggerSpring, _this.isOpen, cond(or(and(greaterThan(abs(_this.gestureX), SWIPE_DISTANCE_MINIMUM), greaterThan(abs(_this.velocityX), _this.swipeVelocityThreshold)), greaterThan(abs(_this.gestureX), _this.swipeDistanceThreshold)), cond(eq(_this.drawerPosition, DIRECTION_LEFT),\n    greaterThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0),\n    lessThan(cond(eq(_this.velocityX, 0), _this.gestureX, _this.velocityX), 0)), _this.isOpen)))]), _this.position]));\n    _defineProperty(_assertThisInitialized(_this), \"translateX\", cond(eq(_this.drawerPosition, DIRECTION_RIGHT), min(max(multiply(_this.drawerWidth, -1), _this.dragX), 0), max(min(_this.drawerWidth, _this.dragX), 0)));\n    _defineProperty(_assertThisInitialized(_this), \"progress\", cond(\n    eq(_this.drawerWidth, 0), 0, abs(divide(_this.translateX, _this.drawerWidth))));\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureEvent\", event([{\n      nativeEvent: {\n        x: _this.touchX,\n        translationX: _this.gestureX,\n        velocityX: _this.velocityX\n      }\n    }]));\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureStateChange\", event([{\n      nativeEvent: {\n        state: function state(s) {\n          return set(_this.gestureState, s);\n        }\n      }\n    }]));\n    _defineProperty(_assertThisInitialized(_this), \"handleContainerLayout\", function (e) {\n      return _this.containerWidth.setValue(e.nativeEvent.layout.width);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleDrawerLayout\", function (e) {\n      _this.drawerWidth.setValue(e.nativeEvent.layout.width);\n      _this.toggleDrawer(_this.props.open);\n\n      requestAnimationFrame(function () {\n        return requestAnimationFrame(function () {\n          return _this.drawerOpacity.setValue(1);\n        });\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"toggleDrawer\", function (open) {\n      if (_this.currentOpenValue !== open) {\n        _this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n        _this.currentOpenValue = open;\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"toggleStatusBar\", function (hidden) {\n      var _this$props2 = _this.props,\n        hideStatusBar = _this$props2.hideStatusBarOnOpen,\n        statusBarAnimation = _this$props2.statusBarAnimation;\n      if (hideStatusBar && _this.isStatusBarHidden !== hidden) {\n        _this.isStatusBarHidden = hidden;\n        StatusBar.setHidden(hidden, statusBarAnimation);\n      }\n    });\n    return _this;\n  }\n  _createClass(DrawerView, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var _this$props3 = this.props,\n        open = _this$props3.open,\n        drawerPosition = _this$props3.drawerPosition,\n        drawerType = _this$props3.drawerType,\n        swipeDistanceThreshold = _this$props3.swipeDistanceThreshold,\n        swipeVelocityThreshold = _this$props3.swipeVelocityThreshold,\n        hideStatusBar = _this$props3.hideStatusBarOnOpen;\n      if (\n      typeof this.pendingOpenValue !== 'boolean' || open !== this.pendingOpenValue) {\n        this.toggleDrawer(open);\n      }\n      this.pendingOpenValue = undefined;\n      if (open !== prevProps.open && hideStatusBar) {\n        this.toggleStatusBar(open);\n      }\n      if (prevProps.drawerPosition !== drawerPosition) {\n        this.drawerPosition.setValue(drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n      }\n      if (prevProps.drawerType !== drawerType) {\n        this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n      }\n      if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n        this.swipeDistanceThreshold.setValue(swipeDistanceThreshold);\n      }\n      if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n        this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.toggleStatusBar(false);\n      this.handleEndInteraction();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props4 = this.props,\n        open = _this$props4.open,\n        swipeEnabled = _this$props4.swipeEnabled,\n        drawerPosition = _this$props4.drawerPosition,\n        drawerType = _this$props4.drawerType,\n        swipeEdgeWidth = _this$props4.swipeEdgeWidth,\n        drawerStyle = _this$props4.drawerStyle,\n        overlayStyle = _this$props4.overlayStyle,\n        renderDrawerContent = _this$props4.renderDrawerContent,\n        renderSceneContent = _this$props4.renderSceneContent,\n        gestureHandlerProps = _this$props4.gestureHandlerProps;\n      var isOpen = drawerType === 'permanent' ? true : open;\n      var isRight = drawerPosition === 'right';\n      var contentTranslateX = drawerType === 'front' ? ANIMATED_ZERO : this.translateX;\n      var drawerTranslateX = drawerType === 'back' ? I18nManager.getConstants().isRTL ? multiply(sub(this.containerWidth, this.drawerWidth), isRight ? 1 : -1) : ANIMATED_ZERO : this.translateX;\n      var offset = drawerType === 'back' ? 0 : I18nManager.getConstants().isRTL ? '100%' : multiply(this.drawerWidth, -1);\n\n      var hitSlop = isRight ?\n      {\n        right: 0,\n        width: isOpen ? undefined : swipeEdgeWidth\n      } : {\n        left: 0,\n        width: isOpen ? undefined : swipeEdgeWidth\n      };\n      var progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n      return React.createElement(DrawerProgressContext.Provider, {\n        value: progress\n      }, React.createElement(PanGestureHandler, _extends({\n        activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n        onGestureEvent: this.handleGestureEvent,\n        onHandlerStateChange: this.handleGestureStateChange,\n        hitSlop: hitSlop,\n        enabled: drawerType !== 'permanent' && swipeEnabled\n      }, gestureHandlerProps), React.createElement(Animated.View, {\n        onLayout: this.handleContainerLayout,\n        style: [styles.main, {\n          flexDirection: drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row'\n        }]\n      }, React.createElement(Animated.View, {\n        style: [styles.content, {\n          transform: drawerType === 'permanent' ?\n          [] : [{\n            translateX: contentTranslateX\n          }]\n        }]\n      }, React.createElement(View, {\n        accessibilityElementsHidden: isOpen && drawerType !== 'permanent',\n        importantForAccessibility: isOpen && drawerType !== 'permanent' ? 'no-hide-descendants' : 'auto',\n        style: styles.content\n      }, renderSceneContent()),\n      drawerType === 'permanent' ? null : React.createElement(Overlay, {\n        progress: progress,\n        onPress: function onPress() {\n          return _this2.toggleDrawer(false);\n        },\n        style: overlayStyle,\n        accessibilityElementsHidden: !isOpen,\n        importantForAccessibility: isOpen ? 'auto' : 'no-hide-descendants'\n      })), React.createElement(Animated.Code, {\n        exec: this.containerWidth\n      }), drawerType === 'permanent' ? null : React.createElement(Animated.Code, {\n        exec: block([onChange(this.manuallyTriggerSpring, [cond(eq(this.manuallyTriggerSpring, TRUE), [set(this.nextIsOpen, FALSE), call([], function () {\n          return _this2.currentOpenValue = false;\n        })])])])\n      }), React.createElement(Animated.View, {\n        accessibilityViewIsModal: isOpen && drawerType !== 'permanent',\n        removeClippedSubviews: Platform.OS !== 'ios',\n        onLayout: this.handleDrawerLayout,\n        style: [styles.container, {\n          transform: drawerType === 'permanent' ?\n          [] : [{\n            translateX: drawerTranslateX\n          }],\n          opacity: this.drawerOpacity\n        }, drawerType === 'permanent' ?\n        isRight ? {\n          right: 0\n        } : {\n          left: 0\n        } : [styles.nonPermanent, isRight ? {\n          right: offset\n        } : {\n          left: offset\n        }, {\n          zIndex: drawerType === 'back' ? -1 : 0\n        }], drawerStyle]\n      }, renderDrawerContent()))));\n    }\n  }]);\n  return DrawerView;\n}(React.Component);\nexport { DrawerView as default };\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%'\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH\n  },\n  content: {\n    flex: 1\n  },\n  main: _objectSpread({\n    flex: 1\n  }, Platform.select({\n    web: null,\n    default: {\n      overflow: 'hidden'\n    }\n  }))\n});","map":{"version":3,"sources":["Drawer.tsx"],"names":["React","Animated","DrawerProgressContext","GestureState","PanGestureHandler","Overlay","Clock","Value","onChange","clockRunning","startClock","stopClock","spring","abs","add","and","block","call","cond","divide","eq","event","greaterThan","lessThan","max","min","multiply","neq","or","set","sub","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_MINIMUM","DEFAULT_DRAWER_WIDTH","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","ANIMATED_ZERO","ANIMATED_ONE","DrawerView","Component","componentDidUpdate","prevProps","open","drawerPosition","drawerType","swipeDistanceThreshold","swipeVelocityThreshold","hideStatusBarOnOpen","hideStatusBar","props","pendingOpenValue","toggleDrawer","undefined","toggleStatusBar","setValue","isDrawerTypeFront","componentWillUnmount","handleEndInteraction","interactionHandle","InteractionManager","clearInteractionHandle","createInteractionHandle","drawerStyle","dimensions","width","StyleSheet","flatten","endsWith","percentage","Number","replace","isFinite","getDrawerWidth","UNDETERMINED","initialDrawerWidth","touchX","gestureX","drawerWidth","containerWidth","isOpen","toValue","frameTime","state","position","time","finished","velocity","clock","velocityX","handleStartInteraction","manuallyTriggerSpring","offsetX","value","Boolean","currentOpenValue","onOpen","onClose","forceUpdate","nextIsOpen","isSwiping","keyboardDismissMode","Keyboard","dismiss","gestureState","ACTIVE","touchDistanceFromDrawer","transitionTo","dragX","translateX","nativeEvent","x","translationX","s","e","layout","requestAnimationFrame","drawerOpacity","hidden","statusBarAnimation","isStatusBarHidden","StatusBar","setHidden","render","swipeEnabled","swipeEdgeWidth","overlayStyle","renderDrawerContent","renderSceneContent","gestureHandlerProps","isRight","contentTranslateX","drawerTranslateX","I18nManager","getConstants","isRTL","offset","hitSlop","right","left","progress","handleGestureEvent","handleGestureStateChange","handleContainerLayout","styles","main","flexDirection","content","transform","Platform","OS","handleDrawerLayout","container","opacity","nonPermanent","zIndex","create","backgroundColor","maxWidth","top","bottom","flex","select","web","default","overflow"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport * as React from 'react';\nimport { I18nManager, InteractionManager, Keyboard, Platform, StatusBar, StyleSheet, View } from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport DrawerProgressContext from '../../utils/DrawerProgressContext';\nimport { GestureState, PanGestureHandler } from '../GestureHandler';\nimport Overlay from './Overlay';\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub\n} = Animated;\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\nconst SWIPE_DISTANCE_MINIMUM = 5;\nconst DEFAULT_DRAWER_WIDTH = '80%';\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01\n};\nconst ANIMATED_ZERO = new Animated.Value(0);\nconst ANIMATED_ONE = new Animated.Value(1);\nexport default class DrawerView extends React.Component {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"handleEndInteraction\", () => {\n      if (this.interactionHandle !== undefined) {\n        InteractionManager.clearInteractionHandle(this.interactionHandle);\n        this.interactionHandle = undefined;\n      }\n    });\n    _defineProperty(this, \"handleStartInteraction\", () => {\n      if (this.interactionHandle === undefined) {\n        this.interactionHandle = InteractionManager.createInteractionHandle();\n      }\n    });\n    _defineProperty(this, \"getDrawerWidth\", () => {\n      const {\n        drawerStyle,\n        dimensions\n      } = this.props;\n      const {\n        width = DEFAULT_DRAWER_WIDTH\n      } = StyleSheet.flatten(drawerStyle) || {};\n      if (typeof width === 'string' && width.endsWith('%')) {\n        // Try to calculate width if a percentage is given\n        const percentage = Number(width.replace(/%$/, ''));\n        if (Number.isFinite(percentage)) {\n          return dimensions.width * (percentage / 100);\n        }\n      }\n      return typeof width === 'number' ? width : 0;\n    });\n    _defineProperty(this, \"clock\", new Clock());\n    _defineProperty(this, \"interactionHandle\", void 0);\n    _defineProperty(this, \"isDrawerTypeFront\", new Value(this.props.drawerType === 'front' ? TRUE : FALSE));\n    _defineProperty(this, \"isOpen\", new Value(this.props.open ? TRUE : FALSE));\n    _defineProperty(this, \"nextIsOpen\", new Value(UNSET));\n    _defineProperty(this, \"isSwiping\", new Value(FALSE));\n    _defineProperty(this, \"initialDrawerWidth\", this.getDrawerWidth());\n    _defineProperty(this, \"gestureState\", new Value(GestureState.UNDETERMINED));\n    _defineProperty(this, \"touchX\", new Value(0));\n    _defineProperty(this, \"velocityX\", new Value(0));\n    _defineProperty(this, \"gestureX\", new Value(0));\n    _defineProperty(this, \"offsetX\", new Value(0));\n    _defineProperty(this, \"position\", new Value(this.props.open ? this.initialDrawerWidth * (this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT) : 0));\n    _defineProperty(this, \"containerWidth\", new Value(this.props.dimensions.width));\n    _defineProperty(this, \"drawerWidth\", new Value(this.initialDrawerWidth));\n    _defineProperty(this, \"drawerOpacity\", new Value(this.props.drawerType === 'permanent' ? 1 : 0));\n    _defineProperty(this, \"drawerPosition\", new Value(this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT));\n    _defineProperty(this, \"touchDistanceFromDrawer\", cond(this.isDrawerTypeFront, cond(eq(this.drawerPosition, DIRECTION_LEFT), max(\n    // Distance of touch start from left screen edge - Drawer width\n    sub(sub(this.touchX, this.gestureX), this.drawerWidth), 0), min(multiply(\n    // Distance of drawer from left screen edge - Touch start point\n    sub(sub(this.containerWidth, this.drawerWidth), sub(this.touchX, this.gestureX)), DIRECTION_RIGHT), 0)), 0));\n    _defineProperty(this, \"swipeDistanceThreshold\", new Value(this.props.swipeDistanceThreshold));\n    _defineProperty(this, \"swipeVelocityThreshold\", new Value(this.props.swipeVelocityThreshold));\n    _defineProperty(this, \"currentOpenValue\", this.props.open);\n    _defineProperty(this, \"pendingOpenValue\", void 0);\n    _defineProperty(this, \"isStatusBarHidden\", false);\n    _defineProperty(this, \"manuallyTriggerSpring\", new Value(FALSE));\n    _defineProperty(this, \"transitionTo\", isOpen => {\n      const toValue = new Value(0);\n      const frameTime = new Value(0);\n      const state = {\n        position: this.position,\n        time: new Value(0),\n        finished: new Value(FALSE),\n        velocity: new Value(0)\n      };\n      return block([cond(clockRunning(this.clock), NOOP, [\n      // Animation wasn't running before\n      // Set the initial values and start the clock\n      set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)), set(frameTime, 0), set(state.time, 0), set(state.finished, FALSE), set(state.velocity, this.velocityX), set(this.isOpen, isOpen), startClock(this.clock), call([], this.handleStartInteraction), set(this.manuallyTriggerSpring, FALSE)]), spring(this.clock, state, {\n        ...SPRING_CONFIG,\n        toValue\n      }), cond(state.finished, [\n      // Reset gesture and velocity from previous gesture\n      set(this.touchX, 0), set(this.gestureX, 0), set(this.velocityX, 0), set(this.offsetX, 0),\n      // When the animation finishes, stop the clock\n      stopClock(this.clock), call([this.isOpen], _ref => {\n        let [value] = _ref;\n        const open = Boolean(value);\n        this.handleEndInteraction();\n        if (open !== this.props.open) {\n          // Sync drawer's state after animation finished\n          // This shouldn't be necessary, but there seems to be an issue on iOS\n          this.toggleDrawer(this.props.open);\n        }\n      })])]);\n    });\n    _defineProperty(this, \"dragX\", block([onChange(this.isOpen, call([this.isOpen], _ref2 => {\n      let [value] = _ref2;\n      const open = Boolean(value);\n      this.currentOpenValue = open;\n\n      // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n      if (open !== this.props.open) {\n        // If the mode changed, update state\n        if (open) {\n          this.props.onOpen();\n        } else {\n          this.props.onClose();\n        }\n        this.pendingOpenValue = open;\n\n        // Force componentDidUpdate to fire, whether user does a setState or not\n        // This allows us to detect when the user drops the update and revert back\n        // It's necessary to make sure that the state stays in sync\n        this.forceUpdate();\n      }\n    })), onChange(this.nextIsOpen, cond(neq(this.nextIsOpen, UNSET), [\n    // Stop any running animations\n    cond(clockRunning(this.clock), stopClock(this.clock)),\n    // Update the open value to trigger the transition\n    set(this.isOpen, this.nextIsOpen), set(this.gestureX, 0), set(this.nextIsOpen, UNSET)])),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(this.isSwiping,\n    // Listen to updates for this value only when it changes\n    // Without `onChange`, this will fire even if the value didn't change\n    // We don't want to call the listeners if the value didn't change\n    call([this.isSwiping], _ref3 => {\n      let [value] = _ref3;\n      const {\n        keyboardDismissMode\n      } = this.props;\n      if (value === TRUE) {\n        if (keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n        this.toggleStatusBar(true);\n      } else {\n        this.toggleStatusBar(this.currentOpenValue);\n      }\n    })), onChange(this.gestureState, cond(eq(this.gestureState, GestureState.ACTIVE), call([], this.handleStartInteraction))), cond(eq(this.gestureState, GestureState.ACTIVE), [cond(this.isSwiping, NOOP, [\n    // We weren't dragging before, set it to true\n    set(this.isSwiping, TRUE),\n    // Also update the drag offset to the last position\n    set(this.offsetX, this.position)]),\n    // Update position with previous offset + gesture distance\n    set(this.position, add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)),\n    // Stop animations while we're dragging\n    stopClock(this.clock)], [set(this.isSwiping, FALSE), set(this.touchX, 0), this.transitionTo(cond(this.manuallyTriggerSpring, this.isOpen, cond(or(and(greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM), greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)), greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)), cond(eq(this.drawerPosition, DIRECTION_LEFT),\n    // If swiped to right, open the drawer, otherwise close it\n    greaterThan(cond(eq(this.velocityX, 0), this.gestureX, this.velocityX), 0),\n    // If swiped to left, open the drawer, otherwise close it\n    lessThan(cond(eq(this.velocityX, 0), this.gestureX, this.velocityX), 0)), this.isOpen)))]), this.position]));\n    _defineProperty(this, \"translateX\", cond(eq(this.drawerPosition, DIRECTION_RIGHT), min(max(multiply(this.drawerWidth, -1), this.dragX), 0), max(min(this.drawerWidth, this.dragX), 0)));\n    _defineProperty(this, \"progress\", cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0), 0, abs(divide(this.translateX, this.drawerWidth))));\n    _defineProperty(this, \"handleGestureEvent\", event([{\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX\n      }\n    }]));\n    _defineProperty(this, \"handleGestureStateChange\", event([{\n      nativeEvent: {\n        state: s => set(this.gestureState, s)\n      }\n    }]));\n    _defineProperty(this, \"handleContainerLayout\", e => this.containerWidth.setValue(e.nativeEvent.layout.width));\n    _defineProperty(this, \"handleDrawerLayout\", e => {\n      this.drawerWidth.setValue(e.nativeEvent.layout.width);\n      this.toggleDrawer(this.props.open);\n\n      // Until layout is available, drawer is hidden with opacity: 0 by default\n      // Show it in the next frame when layout is available\n      // If we don't delay it until the next frame, there's a visible flicker\n      requestAnimationFrame(() => requestAnimationFrame(() => this.drawerOpacity.setValue(1)));\n    });\n    _defineProperty(this, \"toggleDrawer\", open => {\n      if (this.currentOpenValue !== open) {\n        this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n        // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n        // However, there's a race condition on Android, so we need to set a bit earlier\n        this.currentOpenValue = open;\n      }\n    });\n    _defineProperty(this, \"toggleStatusBar\", hidden => {\n      const {\n        hideStatusBarOnOpen: hideStatusBar,\n        statusBarAnimation\n      } = this.props;\n      if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n        this.isStatusBarHidden = hidden;\n        StatusBar.setHidden(hidden, statusBarAnimation);\n      }\n    });\n  }\n  componentDidUpdate(prevProps) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBarOnOpen: hideStatusBar\n    } = this.props;\n    if (\n    // If we're not in the middle of a transition, sync the drawer's open state\n    typeof this.pendingOpenValue !== 'boolean' || open !== this.pendingOpenValue) {\n      this.toggleDrawer(open);\n    }\n    this.pendingOpenValue = undefined;\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n    }\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(swipeDistanceThreshold);\n    }\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n    this.handleEndInteraction();\n  }\n  render() {\n    const {\n      open,\n      swipeEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      drawerStyle,\n      overlayStyle,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps\n    } = this.props;\n    const isOpen = drawerType === 'permanent' ? true : open;\n    const isRight = drawerPosition === 'right';\n    const contentTranslateX = drawerType === 'front' ? ANIMATED_ZERO : this.translateX;\n    const drawerTranslateX = drawerType === 'back' ? I18nManager.getConstants().isRTL ? multiply(sub(this.containerWidth, this.drawerWidth), isRight ? 1 : -1) : ANIMATED_ZERO : this.translateX;\n    const offset = drawerType === 'back' ? 0 : I18nManager.getConstants().isRTL ? '100%' : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/software-mansion/react-native-gesture-handler/issues/569\n    const hitSlop = isRight ?\n    // Extend hitSlop to the side of the screen when drawer is closed\n    // This lets the user drag the drawer from the side of the screen\n    {\n      right: 0,\n      width: isOpen ? undefined : swipeEdgeWidth\n    } : {\n      left: 0,\n      width: isOpen ? undefined : swipeEdgeWidth\n    };\n    const progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n    return /*#__PURE__*/React.createElement(DrawerProgressContext.Provider, {\n      value: progress\n    }, /*#__PURE__*/React.createElement(PanGestureHandler, _extends({\n      activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n      failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n      onGestureEvent: this.handleGestureEvent,\n      onHandlerStateChange: this.handleGestureStateChange,\n      hitSlop: hitSlop,\n      enabled: drawerType !== 'permanent' && swipeEnabled\n    }, gestureHandlerProps), /*#__PURE__*/React.createElement(Animated.View, {\n      onLayout: this.handleContainerLayout,\n      style: [styles.main, {\n        flexDirection: drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row'\n      }]\n    }, /*#__PURE__*/React.createElement(Animated.View, {\n      style: [styles.content, {\n        transform: drawerType === 'permanent' ?\n        // Reanimated needs the property to be present, but it results in Browser bug\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n        [] : [{\n          translateX: contentTranslateX\n        }]\n      }]\n    }, /*#__PURE__*/React.createElement(View, {\n      accessibilityElementsHidden: isOpen && drawerType !== 'permanent',\n      importantForAccessibility: isOpen && drawerType !== 'permanent' ? 'no-hide-descendants' : 'auto',\n      style: styles.content\n    }, renderSceneContent()),\n    // Disable overlay if sidebar is permanent\n    drawerType === 'permanent' ? null : /*#__PURE__*/React.createElement(Overlay, {\n      progress: progress,\n      onPress: () => this.toggleDrawer(false),\n      style: overlayStyle,\n      accessibilityElementsHidden: !isOpen,\n      importantForAccessibility: isOpen ? 'auto' : 'no-hide-descendants'\n    })), /*#__PURE__*/React.createElement(Animated.Code, {\n      // This is needed to make sure that container width updates with `setValue`\n      // Without this, it won't update when not used in styles\n      exec: this.containerWidth\n    }), drawerType === 'permanent' ? null : /*#__PURE__*/React.createElement(Animated.Code, {\n      exec: block([onChange(this.manuallyTriggerSpring, [cond(eq(this.manuallyTriggerSpring, TRUE), [set(this.nextIsOpen, FALSE), call([], () => this.currentOpenValue = false)])])])\n    }), /*#__PURE__*/React.createElement(Animated.View, {\n      accessibilityViewIsModal: isOpen && drawerType !== 'permanent',\n      removeClippedSubviews: Platform.OS !== 'ios',\n      onLayout: this.handleDrawerLayout,\n      style: [styles.container, {\n        transform: drawerType === 'permanent' ?\n        // Reanimated needs the property to be present, but it results in Browser bug\n        // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n        [] : [{\n          translateX: drawerTranslateX\n        }],\n        opacity: this.drawerOpacity\n      }, drawerType === 'permanent' ?\n      // Without this, the `left`/`right` values don't get reset\n      isRight ? {\n        right: 0\n      } : {\n        left: 0\n      } : [styles.nonPermanent, isRight ? {\n        right: offset\n      } : {\n        left: offset\n      }, {\n        zIndex: drawerType === 'back' ? -1 : 0\n      }], drawerStyle]\n    }, renderDrawerContent()))));\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%'\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: DEFAULT_DRAWER_WIDTH\n  },\n  content: {\n    flex: 1\n  },\n  main: {\n    flex: 1,\n    ...Platform.select({\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\n      web: null,\n      default: {\n        overflow: 'hidden'\n      }\n    })\n  }\n});\n//# sourceMappingURL=Drawer.js.map"]},"metadata":{},"sourceType":"module"}