{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport React, { useCallback, useEffect } from 'react';\nimport { createDrawerNavigator } from '@react-navigation/drawer';\nimport HomeScreen from \"../Screen/HomeScreen\";\nimport LoginScreen from \"../Screen/LoginScreen\";\nimport { createNativeStackNavigator } from '@react-navigation/native-stack';\nimport AdminNavigator from \"./AdminNavigator\";\nimport NoAuthNavigator from \"./NoAuthNavigator\";\nimport AuthNavigator from \"./AuthNavigator\";\nimport UserNavigator from \"./UserNavigator\";\nimport { createAppContainer } from 'react-navigation';\nimport { useDispatch, useSelector } from 'react-redux';\nimport AddBookScreen from \"../Screen/AddBookScreen\";\nimport CheckoutScreen from \"../Screen/CheckoutScreen\";\nimport { UserLogin } from \"../Actions/UserAction\";\nimport RegisterScreen from \"../Screen/RegisterScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Drawer = createDrawerNavigator();\n\nvar RootNavigator = function RootNavigator() {\n  var _useSelector = useSelector(function (state) {\n      return state.Users;\n    }),\n    user = _useSelector.user,\n    userSuccess = _useSelector.userSuccess,\n    userError = _useSelector.userError,\n    message = _useSelector.message;\n  var dispatch = useDispatch();\n  var loginDispatch = useCallback(_asyncToGenerator(function* () {\n    yield dispatch(UserLogin());\n    if (user) {\n      console.log(user);\n    }\n  }), [user, dispatch]);\n  useEffect(function () {\n  }, [dispatch]);\n  return _jsxs(Drawer.Navigator, {\n    children: [_jsx(Drawer.Screen, {\n      name: \"Home\",\n      component: HomeScreen\n    }), !user && _jsxs(_Fragment, {\n      children: [_jsx(Drawer.Screen, {\n        name: \"Login\",\n        component: LoginScreen\n      }), _jsx(Drawer.Screen, {\n        name: \"Register\",\n        component: RegisterScreen\n      })]\n    }), user && user.role == \"ADMIN\" && _jsx(_Fragment, {\n      children: _jsx(Drawer.Screen, {\n        name: \"AddBook\",\n        component: AddBookScreen\n      })\n    }), user && user.role == \"USER\" && _jsx(_Fragment, {\n      children: _jsx(Drawer.Screen, {\n        name: \"Checkout\",\n        component: CheckoutScreen\n      })\n    })]\n  });\n};\nexport default RootNavigator;","map":{"version":3,"names":["React","useCallback","useEffect","createDrawerNavigator","HomeScreen","LoginScreen","createNativeStackNavigator","AdminNavigator","NoAuthNavigator","AuthNavigator","UserNavigator","createAppContainer","useDispatch","useSelector","AddBookScreen","CheckoutScreen","UserLogin","RegisterScreen","Drawer","RootNavigator","state","Users","user","userSuccess","userError","message","dispatch","loginDispatch","console","log","role"],"sources":["C:/Users/Quan Doan/Desktop/fullstack-SpringBoot-React/practice-library-app/frontend/navigator/RootNavigator.jsx"],"sourcesContent":["import { StyleSheet, Text, View } from 'react-native'\r\nimport React, { useCallback, useEffect } from 'react'\r\nimport { createDrawerNavigator } from '@react-navigation/drawer'\r\nimport HomeScreen from '../Screen/HomeScreen'\r\nimport LoginScreen from '../Screen/LoginScreen'\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack'\r\nimport AdminNavigator from './AdminNavigator'\r\nimport NoAuthNavigator from './NoAuthNavigator'\r\nimport AuthNavigator from './AuthNavigator'\r\nimport UserNavigator from './UserNavigator'\r\nimport { createAppContainer } from 'react-navigation'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport AddBookScreen from '../Screen/AddBookScreen'\r\nimport CheckoutScreen from '../Screen/CheckoutScreen'\r\nimport { UserLogin } from '../Actions/UserAction'\r\nimport RegisterScreen from '../Screen/RegisterScreen'\r\n\r\nconst Drawer = createDrawerNavigator()\r\n\r\n// const adminStackNavigator = createNativeStackNavigator()\r\n\r\n// const adminStack = () => {\r\n//   return (\r\n//     <adminStackNavigator.Navigator>\r\n//       <AdminNavigator.Screen name=\"public\" component={NoAuthNavigator}></AdminNavigator.Screen>\r\n//       <AdminNavigator.Screen name=\"private\" component={AdminNavigator}></AdminNavigator.Screen>\r\n//     </adminStackNavigator.Navigator>\r\n//   )\r\n// }\r\n\r\n// const userStackNavigator = createNativeStackNavigator()\r\n\r\n\r\n\r\n// const userStack = () => {\r\n//   return (\r\n//     <userStackNavigator.Navigator>\r\n//       <userStackNavigator.Screen name='public' component={NoAuthNavigator}></userStackNavigator.Screen>\r\n//       <userStackNavigator.Screen name='private' component={UserNavigator}></userStackNavigator.Screen>\r\n//     </userStackNavigator.Navigator>\r\n//   )\r\n// }\r\n\r\n\r\n\r\nconst RootNavigator = () => {\r\n\r\n  const {user, userSuccess, userError, message} = useSelector(state => state.Users)\r\n  const dispatch = useDispatch()\r\n\r\n  const loginDispatch = useCallback( async () => {\r\n   await  dispatch(UserLogin())\r\n   if(user) {\r\n    console.log(user)\r\n   }\r\n  }, [user, dispatch])\r\n\r\n  useEffect(() => {\r\n  // loginDispatch()\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <Drawer.Navigator>\r\n        <Drawer.Screen name='Home' component={HomeScreen}></Drawer.Screen>\r\n       {!user && (\r\n        <>\r\n        <Drawer.Screen name='Login' component={LoginScreen}></Drawer.Screen>\r\n        <Drawer.Screen name='Register' component={RegisterScreen}></Drawer.Screen>\r\n        </>\r\n       )}\r\n        {user && user.role == \"ADMIN\" && (\r\n          <> \r\n            <Drawer.Screen name='AddBook' component={AddBookScreen}></Drawer.Screen>\r\n          </>\r\n        )}\r\n        {user && user.role == \"USER\" && (\r\n          <>\r\n          <Drawer.Screen name='Checkout'  component={CheckoutScreen}></Drawer.Screen>\r\n          </>\r\n        )}\r\n     </Drawer.Navigator>\r\n  )\r\n\r\n}\r\n\r\nexport default RootNavigator\r\n\r\n"],"mappings":";;;;AACA,OAAOA,KAAK,IAAIC,WAAW,EAAEC,SAAS,QAAQ,OAAO;AACrD,SAASC,qBAAqB,QAAQ,0BAA0B;AAChE,OAAOC,UAAU;AACjB,OAAOC,WAAW;AAClB,SAASC,0BAA0B,QAAQ,gCAAgC;AAC3E,OAAOC,cAAc;AACrB,OAAOC,eAAe;AACtB,OAAOC,aAAa;AACpB,OAAOC,aAAa;AACpB,SAASC,kBAAkB,QAAQ,kBAAkB;AACrD,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,OAAOC,aAAa;AACpB,OAAOC,cAAc;AACrB,SAASC,SAAS;AAClB,OAAOC,cAAc;AAAgC;AAAA;AAAA;AAErD,IAAMC,MAAM,GAAGf,qBAAqB,EAAE;;AA4BtC,IAAMgB,aAAa,GAAG,SAAhBA,aAAa,GAAS;EAE1B,mBAAgDN,WAAW,CAAC,UAAAO,KAAK;MAAA,OAAIA,KAAK,CAACC,KAAK;IAAA,EAAC;IAA1EC,IAAI,gBAAJA,IAAI;IAAEC,WAAW,gBAAXA,WAAW;IAAEC,SAAS,gBAATA,SAAS;IAAEC,OAAO,gBAAPA,OAAO;EAC5C,IAAMC,QAAQ,GAAGd,WAAW,EAAE;EAE9B,IAAMe,aAAa,GAAG1B,WAAW,mBAAE,aAAY;IAC9C,MAAOyB,QAAQ,CAACV,SAAS,EAAE,CAAC;IAC5B,IAAGM,IAAI,EAAE;MACRM,OAAO,CAACC,GAAG,CAACP,IAAI,CAAC;IAClB;EACD,CAAC,GAAE,CAACA,IAAI,EAAEI,QAAQ,CAAC,CAAC;EAEpBxB,SAAS,CAAC,YAAM;EAEhB,CAAC,EAAE,CAACwB,QAAQ,CAAC,CAAC;EAEd,OACE,MAAC,MAAM,CAAC,SAAS;IAAA,WACb,KAAC,MAAM,CAAC,MAAM;MAAC,IAAI,EAAC,MAAM;MAAC,SAAS,EAAEtB;IAAW,EAAiB,EAClE,CAACkB,IAAI,IACL;MAAA,WACA,KAAC,MAAM,CAAC,MAAM;QAAC,IAAI,EAAC,OAAO;QAAC,SAAS,EAAEjB;MAAY,EAAiB,EACpE,KAAC,MAAM,CAAC,MAAM;QAAC,IAAI,EAAC,UAAU;QAAC,SAAS,EAAEY;MAAe,EAAiB;IAAA,EAE1E,EACCK,IAAI,IAAIA,IAAI,CAACQ,IAAI,IAAI,OAAO,IAC3B;MAAA,UACE,KAAC,MAAM,CAAC,MAAM;QAAC,IAAI,EAAC,SAAS;QAAC,SAAS,EAAEhB;MAAc;IAAiB,EAE3E,EACAQ,IAAI,IAAIA,IAAI,CAACQ,IAAI,IAAI,MAAM,IAC1B;MAAA,UACA,KAAC,MAAM,CAAC,MAAM;QAAC,IAAI,EAAC,UAAU;QAAE,SAAS,EAAEf;MAAe;IAAiB,EAE5E;EAAA,EACe;AAGxB,CAAC;AAED,eAAeI,aAAa"},"metadata":{},"sourceType":"module"}